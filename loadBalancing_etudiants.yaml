heat_template_version: 2014-10-16

description: A template to deploy a load balanced web server

parameters:
  external_network:
    type: string
    description: A Neutron external network
    default: ext-net
    constraints:
     - custom_constraint: neutron.network
  private_network:
    type: string
    default: inf4410-net
    constraints:
     - custom_constraint: neutron.network

  image:
    type: string
    description: Image utilisee pour les serveurs
    default: INF4410-Ubuntu-trusty-mini 
    constraints:
      - custom_constraint: glance.image

  flavor:
    type: string
    description: Flavor utilisee par les serveurs
    default: INF4410-mini
    constraints:
      - custom_constraint: nova.flavor

  subnet_id:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: inf4410-subnet
    constraints:
     - custom_constraint: neutron.subnet

    # Vous pouvez ajouter d'autres paramètres
    # Il faut bien définir les descriptions, les valeurs par default et les contraintes

resources:
  server_nodes:
      type: OS::Heat::ResourceGroup
      properties:
        count: 2
        resource_def:
            type: OS::Nova::Server
            properties:
                name: my_server_%index%
                image: { get_param: image }
                flavor: { get_param: flavor }
                networks:
                        - network: { get_param: private_network }
                user_data_format: RAW
                user_data: |
                        #!/bin/bash
                        wget https://raw.githubusercontent.com/houssemmh/INF8480-TP3/master/server.py
                        python server.py


  mypool:
      type: OS::Neutron::Pool
      properties:
        monitors: [{ get_resource: mymonitor }]
        lb_method: ROUND_ROBIN
        protocol: HTTP
        subnet: { get_param: subnet_id }
        vip:
            protocol_port: 8080

  myloadbalancer:
      type: OS::Neutron::LoadBalancer
      properties:
          members: { get_attr: [server_nodes, refs] }
          pool_id: { get_resource: mypool }
          protocol_port: 8080

  mymonitor:
      type: OS::Neutron::HealthMonitor
      properties:
          delay: 15
          max_retries: 1
          timeout: 5
          type: PING

  # assign a floating ip address to the load balancer
  # pool.
  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_attr: [mypool, vip, port_id]}

outputs:
  pool_ip_address:
    value: {get_attr: [mypool, vip, address]}
    description: The IP address of the load balancing pool
